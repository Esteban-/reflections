How did viewing a diff between two versions of a file help you see the bug that was introduced?
	By viewing the differences between the files I was able to see exactly what parts of the documents where changed without reading line after line.
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	By having an easy access to entire history of a file, makes reviewing differences in versions making fixing bugs much more easier.
	Also, It allows for the change to revert to an older version when the new versions get corrupted or to save time in fixing many bugs.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
	The advantage of manually choosing to create a commit is that allows freedom and flexibility to divide the commits based on logical changes. 
	By allowing to make small commits with specific changes, it makes it easier to find differences in the documents much faster.
	However, manually saving can be vulnearble to errors made from the user.
	On the other hand, having versions automatically changed is that helps the user save the changes in cases where the user forgot to do so. 
	Unfortunately, by not having a way to limit or make commits more specific or logical, it makes determining differences among version more time consuming.
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	I think Git allows to save multiple files because it benefits projects like games and webpages, where multiple may need t be updated. 
	I think the reason Google Docs does not support this is because it's more orientated with presentations and single document files, which most of the time they do not need to be edited all at once.
How can you use the commands git log and git diff to view the history of files?
	I can use the git log and diff comands to view the differences between files and see the overall changes done to the project.
How might using version control make you more confident to make changes that could break something?
	When using version-control, you can easily revert to all previous versions of the project, allowing the user make chences with the cofidence that anything that may go wrong can be fixed.
Now that you have your workspace set up, what do you want to try using Git for?
Now after setting a workspace set up, I want to organize and structure my future projects with git and with version-control.